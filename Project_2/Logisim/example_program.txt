//Assembly code for Project 2
.data
    sum: 0
    pb_1: 0xFFF1		//These values are not used in order to prevent extra ld instruction.
	pin_1: 0xFFF0		//They are written directly
	pb_2: 0xFFF3
	pin_2: 0xFFF2
    seven_seg: 0xFFF4
.code
			ldi 0 sum
			ld 0 0
    		ldi 7 0xFFEF 	//Load stack pointer in order to avoid any collision with the pin values
pb1check    ldi 2 0xFFF1	//Write PB_1 into reg_2
    		ld 2 2			
			and 2 2 2
			jz pb2check		//If PB_1 is zero check PB_2
			jmp pin1in		//If PB_1 is one read Pin_1

pb2check	ldi 2 0xFFF3
			ld 2 2
			and 2 2 2
			jz pb1check		//If PB_2 is also zero go back to check PB_1
			jmp pin2in

pin1in		ldi 2 0xFFF0	//Write Pin_1 data into reg_2
			ld 2 2
			add 0 0 0		//reg_0 = reg_0 + reg_0 (Multiply reg_0 by 2)
			add 0 0 2		//reg_0 += reg_2
			call disp		//display data
			jmp pb1wait		//go to pb1zero

pin2in			ldi 2 0xFFF2	//Write Pin_2 data into reg_2
			ld 2 2			
			mov 4 0			//Copy reg_0 into reg_4
			mov 5 2			//Copy reg_2 into reg_5
			call mult		//Multiplication (reg_6 = reg_4 * reg_5)
			mov 0 6			//Copy reg_6 into reg_0
			call disp		//Display result
			jmp pb2wait		//go to pb2zero

//These two steps waits for PB_1 and PB_2 to zero in order to prevent one button signal cause to run program twice.
pb1wait		ldi 2 0xFFF1	//Load PB_1 into reg_2
			ld 2 2
			and 2 2 2		//In order to trigger ZF
			jz pb1check		//If PB_1 is zero go to start
			jmp pb1wait		//Else wait for PB_1 to become zero

pb2wait		ldi 2 0xFFF3
			ld 2 2
			and 2 2 2		//In order to trigger ZF
			jz pb1check		//If PB_2 is zero go to start 
			jmp pb2wait		//Else wait for PB_2 to become zero



//FUNCTIONS

//Multiplication function
//This function is reg_6 = reg_4 * reg_5
mult	    call lt				//Checks if reg_4 is less than reg_5
            and 6 6 6		
            jz mult_start		//If it is not continue
            ldi 6 0             //Load zero to reg_6
            call swap			//Else swap the number in order to optimize (descripted at the end of the function)
mult_start	add 5 5 5
			jz mult_end			//If reg_5 is zero ends the function
mult_loop	add 6 6 4           //Add reg_4 to reg_6 our objective in here is the add reg_4 to reg_6 reg_5 times.
	        dec 5               //Decrease reg_5
	        jz mult_end         //if reg_5 is zero end the multiplication
	        jmp mult_loop       //if not continue
mult_end	ret                 //return to address

//TODO describe optimization



//Less than function 
//If r4 < r5 changes r6's value to one, zero otherwise.
lt      push 4
        push 5
		sub 6 5 4
		jz lt_fail
		ldi 5 0x8000    //16-bit number with 1 at 16th bit 0 otherwise
		and 6 6 5       //Checks if the reg_6's 16th bit is zero or not in order to check its sign.
		jz lt_conf
		ldi 6 0x0
		jmp lt_fail
lt_conf ldi 6 0x1
lt_fail pop 5
        pop 4
		and 6 6 6
        ret


//TODO Write eq and gt
eq		push 4
		push 5
		xor 6 4 5 //If different reg_6 = 1, if not reg_6 = 0
		jz eq_diff
		ldi 6 0x0

		pop 5
		pop 4
		ret

gt		ret


//Division function
//reg_6 = reg_4 / reg_5
//TODO check for division by zero may cause infinite loop 
div	    	ldi 6 0x0
div_check   push 6
			and 5 5 5
			jz div_end
            call lt         // Check if reg_4 is bigger than reg_5 in order to begin the division
            and 6 6 6       //In order to trigger the zeroflag TODO check if this is necessary
	    	jz div_loop
	    	jmp div_end
div_loop    pop 6
            inc 6
            sub 4 4 5
            jmp div_check
div_end     pop 6
            ret

//Swaps reg_4 and reg_5 with using memory
swap    push 4
        push 5
        pop 4
        pop 5
        ret


//Hex to BCD converter function
//TODO shows less than desired result by one. Find the cause
//Converts hexadecimal numbers into bcd format
//Example: 0xA2 which is 162 in decimal format
//Output of this program will be 0x162

hextobcd 	mov 4 0		//Copy the data in reg_0 to reg_4 for division
	        ldi 5 0x3E8 //Load decimal 1000 to reg_5 
	        call div	//After this division reg_6 will contain result and reg_4 mod.
	        push 6		//Push result into memory.
	        ldi 5 0x64  //Load decimal 
	        call div
	        push 6
	        ldi 5 0xA // 10
	        call div
	        push 6
	        ldi 5 0x1 // 1
	        call div
	        push 6
//TODO Operation with the number 1 can be optimized
	        ldi 1 0		//Load 0 to reg_1	
	        pop 4		//Get the last pushed data to reg_4
	        add 1 1 4	//Add result to reg_1
	        ldi 5 0x10	//Load reg_5 0x10 , 0x100...	
	        pop 4
	        call mult
	        add 1 1 6
	        ldi 5 0x100
	        pop 4
	        call mult
	        add 1 1 6
	        ldi 5 0x1000
	        pop 4
	        call mult
	        add 1 1 6
	        ret

disp	ldi 2 0xFFF4	//Load 7-segment address into reg_2
		call hextobcd	//Takes reg_0 and converts to bcd and write reg_1
		st 2 1			//Store data in reg_1 into address in reg_2
		ret